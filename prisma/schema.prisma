// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum status {
  ACTIVE
  INACTIVE
  DELETED
}

enum presenceStatus {
  SKIP
  ONTIME
  LATE
}

enum reportStatus {
  INRANGE
  OUTRANGE
}

model Organization {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?               @default("")
  address             String?               @default("")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  UserHasOrganization UserHasOrganization[]
  Location            Location[]
  Shift               Shift[]

  @@map("organizations")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  UserHasOrganization UserHasOrganization[]
  UserHasRole         UserHasRole[]
  ShiftHasUser        ShiftHasUser[]
  PresenceHasUser     PresenceHasUser[]
  Report              Report[]

  @@map("users")
}

model UserHasOrganization {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("user_has_organizations")
}

model Role {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  UserHasRole       UserHasRole[]
  RoleHasPermission RoleHasPermission[]

  @@map("roles")
}

model UserHasRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_has_roles")
}

model Permission {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  RoleHasPermission RoleHasPermission[]

  @@map("permissions")
}

model RoleHasPermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("role_has_permissions")
}

model Location {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  description    String?
  latitude       Float
  longitude      Float
  interval       Int
  range          Int
  status         status       @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  Report         Report[]

  @@map("locations")
}

model Shift {
  id             Int            @id @default(autoincrement())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  name           String
  description    String?
  startAt        DateTime
  endAt          DateTime
  status         status         @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  ShiftHasUser   ShiftHasUser[]
  Presence       Presence[]
  Report         Report[]

  @@map("shifts")
}

model ShiftHasUser {
  id        Int       @id @default(autoincrement())
  shift     Shift     @relation(fields: [shiftId], references: [id])
  shiftId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  status    status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("shift_has_users")
}

model Presence {
  id              Int               @id @default(autoincrement())
  shift           Shift             @relation(fields: [shiftId], references: [id])
  shiftId         Int
  latitude        Float
  longitude       Float
  status          status            @default(ACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  PresenceHasUser PresenceHasUser[]

  @@map("presences")
}

model PresenceHasUser {
  id         Int            @id @default(autoincrement())
  presence   Presence       @relation(fields: [presenceId], references: [id])
  presenceId Int
  user       User           @relation(fields: [userId], references: [id])
  userId     Int
  status     presenceStatus @default(SKIP)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?

  @@map("presence_has_users")
}

model Report {
  id         Int          @id @default(autoincrement())
  shift      Shift        @relation(fields: [shiftId], references: [id])
  shiftId    Int
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  location   Location     @relation(fields: [locationId], references: [id])
  locationId Int
  latitude   Float
  longitude  Float
  range      Int
  status     reportStatus @default(INRANGE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?

  @@map("reports")
}

model EmailVerifyToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_verify_tokens")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_reset_tokens")
}
